dataset_size = as.integer(dataset_size),
dataset_size = factor(dataset_size, levels = c("1000", "3000", "5000", "10000"))) %>%
ggplot(aes(x = dataset_size, y = runtime_minutes, fill = method, group = dataset_size)) +
facet_wrap(~method, scales = "free") +
geom_violin(draw_quantiles = 0.5,
position = position_dodge(1),
scale = "width",
size = 1,
color = "black") +
scale_y_continuous(labels = scales::number_format(accuracy = .01)) +
scale_x_continuous(labels = scales::comma_format()) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
labs(x = "Number of Cells",
y = "Runtime (minutes)",
fill = "Clustering Method") +
theme_classic(base_size = 14) +
theme(axis.ticks.x = element_blank(),
panel.grid.major.y = element_line())
p9b
p9b <- sim_results %>%
mutate(dataset_size = stringr::str_extract(dataset, "ncell.*_"),
dataset_size = stringr::str_replace(stringr::str_replace(dataset_size, "ncell", ""), "_", ""),
dataset_size = as.integer(dataset_size)) %>%
ggplot(aes(x = dataset_size, y = runtime_minutes, fill = method, group = dataset_size)) +
facet_wrap(~method, scales = "free") +
geom_violin(draw_quantiles = 0.5,
position = position_dodge(1),
scale = "width",
size = 1,
color = "black") +
scale_y_continuous(labels = scales::number_format(accuracy = .01)) +
scale_x_continuous(labels = scales::comma_format()) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
labs(x = "Number of Cells",
y = "Runtime (minutes)",
fill = "Clustering Method") +
theme_classic(base_size = 14) +
theme(axis.ticks.x = element_blank(),
panel.grid.major.y = element_line())
p9b
p9b <- sim_results %>%
mutate(dataset_size = stringr::str_extract(dataset, "ncell.*_"),
dataset_size = stringr::str_replace(stringr::str_replace(dataset_size, "ncell", ""), "_", ""),
dataset_size = as.integer(dataset_size),
dataset_size = factor(dataset_size, levels = c(1000L, 3000L, 5000L, 10000L))) %>%
ggplot(aes(x = dataset_size, y = runtime_minutes, fill = method, group = dataset_size)) +
facet_wrap(~method, scales = "free") +
geom_violin(draw_quantiles = 0.5,
position = position_dodge(1),
scale = "width",
size = 1,
color = "black") +
scale_y_continuous(labels = scales::number_format(accuracy = .01)) +
scale_x_continuous(labels = scales::comma_format()) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
labs(x = "Number of Cells",
y = "Runtime (minutes)",
fill = "Clustering Method") +
theme_classic(base_size = 14) +
theme(axis.ticks.x = element_blank(),
panel.grid.major.y = element_line())
p9b
p9b <- sim_results %>%
mutate(dataset_size = stringr::str_extract(dataset, "ncell.*_"),
dataset_size = stringr::str_replace(stringr::str_replace(dataset_size, "ncell", ""), "_", ""),
dataset_size = as.integer(dataset_size),
dataset_size = factor(dataset_size,
levels = c(1000L, 3000L, 5000L, 10000L),
labels = c("1,000", "3,000", "5,000", "10,000"))) %>%
ggplot(aes(x = dataset_size, y = runtime_minutes, fill = method, group = dataset_size)) +
facet_wrap(~method, scales = "free") +
geom_violin(draw_quantiles = 0.5,
position = position_dodge(1),
scale = "width",
size = 1,
color = "black") +
scale_y_continuous(labels = scales::number_format(accuracy = .01)) +
scale_x_continuous(labels = scales::comma_format()) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
labs(x = "Number of Cells",
y = "Runtime (minutes)",
fill = "Clustering Method") +
theme_classic(base_size = 14) +
theme(axis.ticks.x = element_blank(),
panel.grid.major.y = element_line())
p9b <- sim_results %>%
mutate(dataset_size = stringr::str_extract(dataset, "ncell.*_"),
dataset_size = stringr::str_replace(stringr::str_replace(dataset_size, "ncell", ""), "_", ""),
dataset_size = as.integer(dataset_size),
dataset_size = factor(dataset_size,
levels = c(1000L, 3000L, 5000L, 10000L),
labels = c("1,000", "3,000", "5,000", "10,000"))) %>%
ggplot(aes(x = dataset_size, y = runtime_minutes, fill = method, group = dataset_size)) +
facet_wrap(~method, scales = "free") +
geom_violin(draw_quantiles = 0.5,
position = position_dodge(1),
scale = "width",
size = 1,
color = "black") +
scale_y_continuous(labels = scales::number_format(accuracy = .01)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
labs(x = "Number of Cells",
y = "Runtime (minutes)",
fill = "Clustering Method") +
theme_classic(base_size = 14) +
theme(axis.ticks.x = element_blank(),
panel.grid.major.y = element_line())
p9b
p9b
p9b <- sim_results %>%
mutate(dataset_size = stringr::str_extract(dataset, "ncell.*_"),
dataset_size = stringr::str_replace(stringr::str_replace(dataset_size, "ncell", ""), "_", ""),
dataset_size = as.integer(dataset_size),
dataset_size = factor(dataset_size,
levels = c(1000L, 3000L, 5000L, 10000L),
labels = c("1,000", "3,000", "5,000", "10,000"))) %>%
ggplot(aes(x = dataset_size, y = runtime_minutes, fill = method, group = dataset_size)) +
facet_wrap(~method, scales = "free") +
geom_boxplot(draw_quantiles = 0.5,
position = position_dodge(1),
scale = "width",
size = 1,
color = "black") +
scale_y_continuous(labels = scales::number_format(accuracy = .01)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
labs(x = "Number of Cells",
y = "Runtime (minutes)",
fill = "Clustering Method") +
theme_classic(base_size = 14) +
theme(axis.ticks.x = element_blank(),
panel.grid.major.y = element_line())
p9b
p9b <- sim_results %>%
mutate(dataset_size = stringr::str_extract(dataset, "ncell.*_"),
dataset_size = stringr::str_replace(stringr::str_replace(dataset_size, "ncell", ""), "_", ""),
dataset_size = as.integer(dataset_size),
dataset_size = factor(dataset_size,
levels = c(1000L, 3000L, 5000L, 10000L),
labels = c("1,000", "3,000", "5,000", "10,000"))) %>%
ggplot(aes(x = dataset_size, y = runtime_minutes, fill = method, group = dataset_size)) +
facet_wrap(~method, scales = "free") +
geom_violin(draw_quantiles = 0.5,
position = position_dodge(1),
scale = "width",
size = 1,
color = "black") +
scale_y_continuous(labels = scales::number_format(accuracy = .01)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
labs(x = "Number of Cells",
y = "Runtime (minutes)",
fill = "Clustering Method") +
theme_classic(base_size = 14) +
theme(axis.ticks.x = element_blank(),
panel.grid.major.y = element_line())
p9b
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE); set.seed(312)  # lucky seed
library(dplyr)       # data manipulation
library(Seurat)      # scRNA-seq tools & data structures
library(ggplot2)     # plots
library(targets)     # pipeline tools
library(paletteer)   # plot colors
library(patchwork)   # plot layouts
library(reticulate)  # python
# pancreas reference
tar_load(clustres_panc_ncell1000_nclust3)
tar_load(clustres_panc_ncell1000_nclust5)
tar_load(clustres_panc_ncell1000_nclust7)
tar_load(clustres_panc_ncell3000_nclust3)
tar_load(clustres_panc_ncell3000_nclust5)
tar_load(clustres_panc_ncell3000_nclust7)
tar_load(clustres_panc_ncell5000_nclust3)
tar_load(clustres_panc_ncell5000_nclust5)
tar_load(clustres_panc_ncell5000_nclust7)
tar_load(clustres_panc_ncell10000_nclust3)
tar_load(clustres_panc_ncell10000_nclust5)
tar_load(clustres_panc_ncell10000_nclust7)
# lung reference
tar_load(clustres_lung_ncell1000_nclust3)
tar_load(clustres_lung_ncell1000_nclust5)
tar_load(clustres_lung_ncell1000_nclust7)
tar_load(clustres_lung_ncell3000_nclust3)
tar_load(clustres_lung_ncell3000_nclust5)
tar_load(clustres_lung_ncell3000_nclust7)
tar_load(clustres_lung_ncell5000_nclust3)
tar_load(clustres_lung_ncell5000_nclust5)
tar_load(clustres_lung_ncell5000_nclust7)
tar_load(clustres_lung_ncell10000_nclust3)
tar_load(clustres_lung_ncell10000_nclust5)
tar_load(clustres_lung_ncell10000_nclust7)
sim_results <- purrr::map(ls()[grepl("clustres", ls())],
function(x) {
df <- eval(as.symbol(x))
df <- mutate(df,
reference = case_when(stringr::str_detect(x, "panc") ~ "Pancreas",
TRUE ~ "Lung"),
dataset = x)
return(df)
}) %>%
purrr::reduce(rbind) %>%
filter(method != "Leiden (Seurat)") %>%
mutate(method = factor(method,
levels = c("K-means (Hartigan-Wong)",
"Hierarchical (Ward)",
"Louvain (Seurat)",
"DBSCAN",
"GiniClust3",
"SCISSORS"),
labels = c("K-means",
"Hierarchical",
"Louvain (Seurat)",
"DBSCAN",
"GiniClust3",
"SCISSORS")),
runtime_minutes = case_when(runtime_units == "secs" ~ runtime / 60,
runtime_units == "mins" ~ runtime,
runtime_units == "hours" ~ runtime * 60,
TRUE ~ NA_real_))
p0a <- ggplot(sim_results, aes(x = method, y = ari, fill = method)) +
facet_wrap(~reference) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method", y = "Adjusted Rand Index") +
scale_y_continuous(labels = scales::percent_format(), breaks = seq(0, 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line())
p0a
p0b <- ggplot(sim_results, aes(x = method, y = ari, fill = method)) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method", y = "Adjusted Rand Index") +
scale_y_continuous(labels = scales::percent_format(), breaks = seq(0, 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line())
p0b
p1a <- ggplot(sim_results, aes(x = method, y = nmi, fill = method)) +
facet_wrap(~reference) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method", y = "Normalied Mutual Information") +
scale_y_continuous(labels = scales::percent_format(), breaks = seq(0, 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line())
p1a
p1b <- ggplot(sim_results, aes(x = method, y = nmi, fill = method)) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method", y = "Normalied Mutual Information") +
scale_y_continuous(labels = scales::percent_format(), breaks = seq(0, 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line())
p1b
p2a <- ggplot(sim_results, aes(x = method, y = sil, fill = method)) +
facet_wrap(~reference) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method", y = "Mean Silhouette Score") +
scale_y_continuous(labels = scales::number_format(accuracy = .1),
breaks = seq(round(min(sim_results$sil)), 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line())
p2a
p2b <- ggplot(sim_results, aes(x = method, y = sil, fill = method)) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method", y = "Mean Silhouette Score") +
scale_y_continuous(labels = scales::number_format(accuracy = .1),
breaks = seq(round(min(sim_results$sil)), 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line())
p2b
p3 <- sim_results %>%
with_groups(c(reference, method),
filter,
ari > median(ari)) %>%
ggplot(aes(x = method, y = ari, fill = method)) +
facet_wrap(~reference) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method",
y = "Adjusted Rand Index",
caption = "Top 50% of clustering runs") +
scale_y_continuous(labels = scales::percent_format(), breaks = seq(0, 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line(),
plot.caption = element_text(face = "italic"))
p3
p4 <- sim_results %>%
with_groups(c(reference, method),
filter,
nmi > median(nmi)) %>%
ggplot(aes(x = method, y = nmi, fill = method)) +
facet_wrap(~reference) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method",
y = "Normalized Mutual Information",
caption = "Top 50% of clustering runs") +
scale_y_continuous(labels = scales::percent_format(), breaks = seq(0, 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line(),
plot.caption = element_text(face = "italic"))
p4
p5 <- sim_results %>%
with_groups(c(reference, method),
filter,
sil > median(sil)) %>%
ggplot(aes(x = method, y = sil, fill = method)) +
facet_wrap(~reference) +
geom_violin(draw_quantiles = 0.5,
color = "black",
size = 1) +
ggsignif::geom_signif(comparisons = list(c("SCISSORS", "Louvain (Seurat)"),
c("SCISSORS", "DBSCAN"),
c("SCISSORS", "GiniClust3"),
c("SCISSORS", "K-means"),
c("SCISSORS", "Hierarchical")),
test = "wilcox.test",
step_increase = 0.08,
map_signif_level = TRUE,
vjust = 0.2,
textsize = 3) +
labs(fill = "Clustering Method",
y = "Silhouette Score",
caption = "Top 50% of clustering runs") +
scale_y_continuous(labels = scales::number_format(accuracy = .1),
breaks = seq(round(min(sim_results$sil)), 1, by = 0.25)) +
scale_fill_paletteer_d("ggsci::nrc_npg") +
theme_classic(base_size = 14)  +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9, vjust = 0.9),
axis.title.x = element_blank(),
panel.grid.major.y = element_line(),
plot.caption = element_text(face = "italic"))
p5
tar_load(sim_panc_ncell1000_nclust7)
sim_panc_ncell1000_nclust7@meta.data$cellPopulation2 <- as.integer(sim_panc_ncell1000_nclust7@meta.data$cellPopulation) - 1L
p6 <- DimPlot(sim_panc_ncell1000_nclust7, reduction = "tsne", group.by = "cellPopulation2") +
scale_color_paletteer_d("ggsci::category10_d3") +
labs(x = "t-SNE 1",
y = "t-SNE 2",
color = "True\nLabel") +
theme_classic(base_size = 14) +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
plot.title = element_blank(),
legend.title = element_text(face = "bold")) +
guides(color = guide_legend(override.aes = list(size = 3)))
p6
seu <- Seurat::FindClusters(sim_panc_ncell1000_nclust7,
resolution = 0.1,
algorithm = 1,
random.seed = 312,
verbose = FALSE)
SCISSORS_clusts <- SCISSORS::ReclusterCells(seurat.object = seu,
auto = TRUE,
use.parallel = TRUE,
n.cores = 2,
resolution.vals = seq(0.1, 0.7, by = c(0.1)),
k.vals = c(10, 25, 40, 60),
merge.clusters = FALSE,
use.sct = FALSE,
n.HVG = 2000,
n.PC = 20,
cutoff.score = 0.25,
random.seed = 312)
seu_new <- SCISSORS::IntegrateSubclusters(original.object = seu, reclust.results = SCISSORS_clusts)
SCISSORS_clusts <- as.integer(seu_new$seurat_clusters) - 1L
Louvain_clusts <- Seurat::FindNeighbors(sim_panc_ncell1000_nclust7,
reduction = "pca",
dims = 1:20,
nn.method = "annoy",
annoy.metric = "cosine",
verbose = FALSE) %>%
Seurat::FindClusters(resolution = 0.5,
algorithm = 1,
random.seed = 312,
verbose = FALSE)
Louvain_clusts <- as.integer(Louvain_clusts$seurat_clusters) - 1L
reticulate::use_virtualenv("/nas/longleaf/home/jrleary/Python", required = TRUE)
Leiden_clusts <- Seurat::FindClusters(sim_panc_ncell1000_nclust7,
resolution = 0.5,
algorithm = 4,
random.seed = 312,
verbose = FALSE)$seurat_clusters
Leiden_clusts <- as.integer(Leiden_clusts) - 1L
kmeans_clusts <- kmeans(Embeddings(sim_panc_ncell1000_nclust7, "pca")[, 1:20],
centers = 7,
nstart = 5,
algorithm = "Hartigan-Wong")$cluster
kmeans_clusts <- as.integer(kmeans_clusts) - 1L
hclust_tree <- hclust(SCISSORS::CosineDist(Embeddings(sim_panc_ncell1000_nclust7, "pca")[, 1:20]), method = "ward.D2")
hclust_clusts <- as.integer(cutree(hclust_tree, k = 7)) - 1L
dbscan::kNNdistplot(Embeddings(sim_panc_ncell1000_nclust7, "pca")[, 1:20], k = 10)
abline(h = 8, col = "firebrick", lty = "dashed")
dbscan_clusts <- dbscan::dbscan(scale(sim_panc_ncell1000_nclust7@reductions$pca@cell.embeddings[, 1:20], scale = FALSE),
eps = 8,
minPts = 5,
borderPoints = TRUE)$cluster
reticulate::use_virtualenv("/nas/longleaf/home/jrleary/Python", required = TRUE)
count_mat <- as.matrix(sim_panc_ncell1000_nclust7@assays$RNA@counts)
reticulate::repl_python()
